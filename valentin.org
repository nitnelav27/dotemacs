#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

* 0. Disclaimer
This is my configuration file for emacs. Most of it is not original, but taken from different sources and modified according to my need. Any questions or suggestions for improvement, please refer to [[mailto:valentinvergara@gmail.com][my email]].

* Packages and installation of stuff
** This is for org /repository/

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
		 '("org" . "https://orgmode.org/elpa/") t)
  (add-to-list 'package-archives
		   '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+END_SRC

** Which
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
  #+END_SRC

* Added Functionality (search, etc)
** Swiper /IVY / Counsel
   Swiper gives us a really efficient incremental search with regular expressions
  and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
      :map ivy-minibuffer-map
      ("M-y" . ivy-next-line)))

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "%d/%d ")
      (setq ivy-display-style 'fancy))

    (use-package swiper
      :ensure t
      :bind (("C-s" . swiper)
	     ("C-r" . swiper)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	))
  #+END_SRC
** Spell Checker
   This requires aspell or hunspell (this is the one installed in linux)
   #+BEGIN_SRC emacs-lisp
     (use-package flyspell
       :ensure t
       :hook
       (text-mode . turn-on-flyspell)
       (prog-mode . flyspell-prog-mode)
       (org-mode . turn-on-flyspell))

     (setq ispell-program-name "aspell")
      ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
     ;;(setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US")
   #+END_SRC
** Autocomplete
Company gave me some trouble, as of March, 2020. Therefore, I decided to use auto-complete. For LaTeX, I need yasnippet first

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1))
#+END_SRC

And now it's time to load auto-complete properly
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
:ensure t
;:init
;(progn
;(ac-config-default)
;(global-auto-complete-mode t)
					;)
)

(setq py-python-command "python3")
(setq python-shell-interpreter "python3")
#+END_SRC

This is autocomplete for LaTeX
#+BEGIN_SRC emacs-lisp
;(use-package auto-complete-auctex
;  :ensure t)
(use-package ac-math
  :ensure t)

(add-to-list 'ac-modes 'latex-mode) ; beware of using 'LaTeX-mode instead
(defun my-ac-latex-mode () ; add ac-sources for latex
   (setq ac-sources
         (append '(ac-source-math-latex
           ac-source-latex-commands)
                 ac-sources)))
(add-hook 'LaTeX-mode-hook 'my-ac-latex-mode)
(setq ac-math-unicode-in-math-p nil)
(ac-flyspell-workaround) ; fixes a known bug of delay due to flyspell (if it is there)
(add-to-list 'ac-modes 'org-mode) ; auto-complete for org-mode (optional)
(require 'auto-complete-config) ; should be after add-to-list 'ac-modes and hooks
(ac-config-default)
(setq ac-auto-start t)            ; if t starts ac at startup automatically
(setq ac-auto-show-menu t)
(global-auto-complete-mode t)
#+END_SRC

* Look and feel
** Start in fullscreen
   #+BEGIN_SRC emacs-lisp
     (custom-set-variables
      '(initial-frame-alist (quote ((fullscreen . maximized)))))
   #+END_SRC
** Aesthetics for getting rid of tool bar
   #+BEGIN_SRC emacs-lisp
     ;; No toolbar, please.
     (tool-bar-mode 0)
     ;; Or scroll bar.
     (scroll-bar-mode 0)
   #+END_SRC
*** Just for Mac 
    #+BEGIN_SRC emacs-lisp
      (if (eq system-type 'darwin)
	  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
	  (add-to-list 'default-frame-alist '(ns-appearance . light)))
    #+END_SRC

** Variable fonts
   This way, I could use variable fonts for different parts of a document. Currently, it is not implemented, since I am using Hasklig for everything.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook 
		    (lambda ()
		     (variable-pitch-mode 1))) 
   #+END_SRC
** Font size
   This is to change font and size of every window. It is intended to be variable, if I choose to down the line. Also, there is a different version for Linuz and another one for Mac.
*** For Linux
    #+BEGIN_SRC emacs-lisp
      (if (eq system-type 'gnu/linux)
	  (set-face-attribute 'default nil
			      :family "Source Code Pro"
			      :height 150))
      (if (eq system-type 'gnu/linux)
	  (set-face-attribute 'fixed-pitch nil
			      :family "Source Code Pro"
			      :height 140))
      (if (eq system-type 'gnu/linux)
	  (set-face-attribute 'variable-pitch nil
			      :family "Source Code Pro"
			      :height 150))
    #+END_SRC
*** For Mac
    #+BEGIN_SRC emacs-lisp
      (if (eq system-type 'darwin)
	  (set-face-attribute 'default nil
			      :family "Hasklig" :height 220))
      (if (eq system-type 'darwin)
	  (set-face-attribute 'fixed-pitch nil
			      :family "Hasklig" :height 200))
      (if (eq system-type 'darwin)
	  (set-face-attribute 'variable-pitch nil
			    :family "Hasklig" :height 220))
    #+END_SRC
** Delete Highlighted text
   The normal behavior for this.
   #+BEGIN_SRC emacs-lisp
     (delete-selection-mode 1)
   #+END_SRC
** Preview hex-colors
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t)
#+END_SRC
** Initialize stuff
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)

     (fset 'yes-or-no-p 'y-or-n-p)

     (global-set-key (kbd "<f5>") 'revert-buffer)
   #+END_SRC

** Theme
   A global setting to use doom theme's icons and other stuff

   #+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :custom-face
  (cursor ((t (:background "BlanchedAlmond"))))
  :config
  ;; flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  (load-theme 'doom-material t))

(use-package doom-modeline
  :custom
  ;; Don't compact font caches during GC. Windows Laggy Issue
  (inhibit-compacting-font-caches t)
  (doom-modeline-minor-modes t)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-height 20)
  (doom-modeline-buffer-state-icon t)
  :config
  (doom-modeline-mode))
   #+END_SRC

With this I will enable all-the-icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC

UPDATE: I will comment out the change according to OS. I will only use doom-peackock. In case I want to reenable circadian package in the future, I will just comment it out.

And change the color scheme according to OS. First, for linux:
   #+BEGIN_SRC emacs-lisp
;(if (eq system-type 'gnu/linux)
;    (load-theme 'doom-peacock t))
   #+END_SRC

   And for Mac:
   #+BEGIN_SRC emacs-lisp
     ;(if (eq system-type 'darwin)
     ;    (use-package circadian
     ;      :ensure t
     ;      :config
     ;      (setq circadian-themes '(("8:00" . leuven)
     ;			       ("18:00" . doom-peacock)))
     ;      (circadian-setup)))
   #+END_SRC

** Ace Windows
   For easy window switching, just do =C-x o= and choose the number. It only works with more than 2 windows.
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :ensure t
  :init
  (progn
  (setq aw-scope 'global) ;; was frame
  (global-set-key (kbd "C-x O") 'other-frame)
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))
  #+END_SRC
** Numbers in all buffers
   #+BEGIN_SRC emacs-lisp
   (global-linum-mode t)

					   ; nice formatting for numbers
   (setq linum-format "%4d \u2502 ")
   #+END_SRC
** Global text wrapping
   #+BEGIN_SRC emacs-lisp
     (global-visual-line-mode t)
   #+END_SRC
** Show and highlight parenthesis
   First, shown them
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
     (setq show-paren-delay 0)
   #+END_SRC
   
   Now, be smart about them
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :diminish smartparens-mode
       :ensure t
       :config
       (setq
	sp-autoskip-closing-pair 'always
	sp-hybrid-kill-entire-symbol nil)
       (show-smartparens-global-mode +1)
       (smartparens-global-mode 1)
       ;; Fix usage of ' in Lisp modes
       ;; THANKS: https://github.com/Fuco1/smartparens/issues/286#issuecomment-32324743
       ;; (eval) is used as a hack to quiet Flycheck errors about (sp-with-modes)
       (eval
	'(sp-with-modes sp-lisp-modes
	   ;; disable ', it's the quote character!
	   (sp-local-pair "'" nil :actions nil)
	   ;; also only use the pseudo-quote inside strings where it serve as
	   ;; hyperlink.
	   (sp-local-pair "`" "'" :when '(sp-in-string-p sp-in-comment-p))
	   (sp-local-pair "`" nil
			  :skip-match (lambda (ms mb me)
					(cond
					 ((equal ms "'")
					  (or (sp--org-skip-markup ms mb me)
					      (not (sp-point-in-string-or-comment))))
					 (t (not (sp-point-in-string-or-comment))))))))
       ;; Don't pair { in web-mode
       (eval
	'(sp-with-modes 'web-mode
	   (sp-local-pair "\{" nil :actions nil))))
   #+END_SRC

Rainbow parenthesis according to their depth
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Remap cmd key in Mac
   #+BEGIN_SRC emacs-lisp
     ;; remap command key to meta
;     (if (eq system-type 'darwin)
;	 (setq mac-command-modifier 'meta))
   #+END_SRC
** Show greek letters in org mode 
   #+BEGIN_SRC emacs-lisp
     (setq org-pretty-entitles t)
   #+END_SRC

   This one is longer and if it works, it should toggle on/off whenever the cursor is in the equation(s)
   #+BEGIN_SRC emacs-lisp
     (defvar org-latex-fragment-last nil
       "Holds last fragment/environment you were on.")

     (defun org-latex-fragment-toggle ()
       "Toggle a latex fragment image "
       (and (eq 'org-mode major-mode)
	    (let* ((el (org-element-context))
		   (el-type (car el)))
	      (cond
	       ;; were on a fragment and now on a new fragment
	       ((and
		 ;; fragment we were on
		 org-latex-fragment-last
		 ;; and are on a fragment now
		 (or
		  (eq 'latex-fragment el-type)
		  (eq 'latex-environment el-type))
		 ;; but not on the last one this is a little tricky. as you edit the
		 ;; fragment, it is not equal to the last one. We use the begin
		 ;; property which is less likely to change for the comparison.
		 (not (= (org-element-property :begin el)
			 (org-element-property :begin org-latex-fragment-last))))
		;; go back to last one and put image back
		(save-excursion
		  (goto-char (org-element-property :begin org-latex-fragment-last))
		  (org-preview-latex-fragment))
		;; now remove current image
		(goto-char (org-element-property :begin el))
		(let ((ov (loop for ov in org-latex-fragment-image-overlays
				if
				(and
				 (<= (overlay-start ov) (point))
				 (>= (overlay-end ov) (point)))
				return ov)))
		  (when ov
		    (delete-overlay ov)))
		;; and save new fragment
		(setq org-latex-fragment-last el))

	       ;; were on a fragment and now are not on a fragment
	       ((and
		 ;; not on a fragment now
		 (not (or
		       (eq 'latex-fragment el-type)
		       (eq 'latex-environment el-type)))
		 ;; but we were on one
		 org-latex-fragment-last)
		;; put image back on
		(save-excursion
		  (goto-char (org-element-property :begin org-latex-fragment-last))
		  (org-preview-latex-fragment))
		;; unset last fragment
		(setq org-latex-fragment-last nil))

	       ;; were not on a fragment, and now are
	       ((and
		 ;; we were not one one
		 (not org-latex-fragment-last)
		 ;; but now we are
		 (or
		  (eq 'latex-fragment el-type)
		  (eq 'latex-environment el-type)))
		(goto-char (org-element-property :begin el))
		;; remove image
		(let ((ov (loop for ov in org-latex-fragment-image-overlays
				if
				(and
				 (<= (overlay-start ov) (point))
				 (>= (overlay-end ov) (point)))
				return ov)))
		  (when ov
		    (delete-overlay ov)))
		(setq org-latex-fragment-last el))))))


     (add-hook 'post-command-hook 'org-latex-fragment-toggle)
   #+END_SRC
* Org Mode
** Basic org 
   #+BEGIN_SRC emacs-lisp
     (use-package org 
       :ensure t
       :pin org
       :config
       ;; Syntax highlight in #+BEGIN_SRC blocks
       (setq org-src-fontify-natively t)
       ;; Don't prompt before running code in org
       (setq org-confirm-babel-evaluate nil))

     (use-package org-babel-eval-in-repl
       :ensure t)


   #+END_SRC
   
This is only for Mac 
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :init
       (setq exec-path-from-shell-check-startup-files nil)
       (if (eq system-type 'darwin)
	 (exec-path-from-shell-initialize)))
   #+END_SRC

With this, I make sure that my opened files (after compilation are opened in evince)
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'gnu/linux)
      ;; PDFs visited in Org-mode are opened in Evince (and not in the default choice)
      (eval-after-load "org"
	'(progn
       ;; Change .pdf association directly within the alist
	   (setcdr (assoc "\\.pdf\\'" org-file-apps) "evince %s"))))
#+END_SRC
** Org Bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC

** Management of references
   This will enable org-ref. It is required to have a file with the citations. It works with =.bib= files.
   #+BEGIN_SRC emacs-lisp
     (use-package org-ref
       :after org
       :init
       (setq org-ref-default-bibliography '("~/Dropbox/galactica.bib"))
       ;; Next line is to change the search buffer from helm to ivy (prefer helm, if it works)
       (setq org-ref-completion-library 'org-ref-ivy-cite)
       (setq bibtex-completion-bibliography org-ref-default-bibliography))

     (use-package doi-utils
       :after org)

     (use-package org-ref-bibtex
       :after org)

   #+END_SRC
** Reveal.js for presentations in html
   #+BEGIN_SRC emacs-lisp
     (use-package org-re-reveal
       :ensure t
       :config
       (require 'ox-re-reveal)
       ;(setq org-re-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
       (setq org-re-reveal-root "https://revealjs.com/")
       (setq org-re-reveal-mathjax t)
       (setq org-re-reveal-highlight-css t)
     )

     (use-package htmlize
       :ensure t)
  #+END_SRC

** Support for ipython and jupyter notebooks
   #+BEGIN_SRC emacs-lisp
     ;; Ipython
     (use-package ob-ipython
       :ensure t)
     (require 'ob-ipython)

     ;; Jupyter notebooks
     (use-package ein
       :ensure t)
     (require 'ein)

     (setq org-babel-python-command "python3")

     (custom-set-variables
      '(flycheck-python-flake8-executable "python3")
      '(flycheck-python-pycompile-executable "python3")
      '(flycheck-python-pylint-executable "python3"))
   #+END_SRC
** Exporting to LaTeX
   This is to produce a pdf without using shell. Let's see if it works
   #+BEGIN_SRC emacs-lisp
     (setq org-latex-pdf-process
	   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	     "bibtex %b"
	     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
   #+END_SRC
   
   And this is for minted listings
   #+BEGIN_SRC emacs-lisp
     (setq org-latex-listings t)
     (setq org-latex-listings 'minted)
     (setq org-latex-minted-options
		'(("frame" "lines")
		  ;("fontsize" "\\scriptsize")
		  ("numbers" "both")
		  ("mathescape")
		  ("breaklines" "true")
		  ("breakanywhere" "true")
		  ("style" "tango")))
   #+END_SRC

I will use the following code to make the /exam/ class recognizable by org export 
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
	'("exam"
	   "\\documentclass{exam}
	   [NO-DEFAULT-PACKAGES]
	   [PACKAGES]
	   [EXTRA]"
	   ("\\section{%s}" . "\\section*{%s}")
	   ("\\subsection{%s}" . "\\subsection*{%s}")
	   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	   ("\\paragraph{%s}" . "\\paragraph*{%s}")
	   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

Nothing in =hypersetup=
#+BEGIN_SRC emacs-lisp
  (setq org-latex-with-hyperref nil)
#+END_SRC

** CV in org 
   #+BEGIN_SRC emacs-lisp
     (use-package ox-moderncv
	 :load-path "~/.emacs.d/org-cv/"
	 :init (require 'ox-moderncv))
   #+END_SRC
** Literate programming (ipython)
   #+BEGIN_SRC emacs-lisp
     (require 'ob-ipython)
   #+END_SRC
** Load all the languages in org 
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
	(python . t)
	(latex . t)
	(R . t)
	(ein . t)
	(css . t)
	(matlab . t)
	(octave . t)
	(shell . t)
	(ipython . t)
	(fortran . t)
	(gnuplot . t)
	(java . t)
	(C . t)))
   #+END_SRC
    And then, some misc stuff
    #+BEGIN_SRC emacs-lisp
     ;; to use R kernel on ein chunks
      (ein:org-register-lang-mode "ein-R" 'R)
    #+END_SRC
** Source blocks are not indented (mostly for python)
#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0
      org-src-preserve-indentation t)
#+END_SRC
* Python
** Elpy (should do most of the work)
   #+BEGIN_SRC emacs-lisp
   (use-package elpy
     :ensure t
     :init 
     (elpy-enable))

   (setq elpy-rpc-python-command "python3")

   (setq python-shell-interpreter "python3"
	 python-shell-interpreter-args "-i")
   #+END_SRC
** Flycheck for autocompletion
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :ensure t
     :init
     (global-flycheck-mode t))
  #+END_SRC

** Some other stuff to use Python 3
Here are some general stuff to change the default interpreter to version 3
   #+BEGIN_SRC emacs-lisp
     (setq python-shell-interpreter "python3")
     (setq python-shell-interpreter-args "-m IPython --simple-prompt -i")
     (setq flycheck-python-pycompile-executable "python3")
   #+END_SRC

And some more stuff to make it compatible with doom-themes.
   #+BEGIN_SRC emacs-lisp
     (defvar doom-modeline-python-executable "python"
       "What executable of Python will be used (if nil nothing will be showed).")

     (setq doom-modeline-python-executable "python3")
     (setq python-shell-interpreter "python3")
     (setq python-shell-interpreter-args "-m IPython --simple-prompt -i")
     (setq flycheck-python-pycompile-executable "python3"
	   flycheck-python-pylint-executable "python3"
	   flycheck-python-flake8-executable "python3")
     (setq doom-modeline-major-mode-icon nil
	   doom-modeline-persp-name t
	   doom-modeline-github t
	   doom-modeline-version t
	   doom-modeline-minor-modes t)
     ;(minions-mode 1)
     ;(setq persp-nil-name "#")
     ;(setq minions-mode-line-lighter "◎")

     (with-eval-after-load 'python
       (defun python-shell-completion-native-try ()
	 "Return non-nil if can trigger native completion."
	 (let ((python-shell-completion-native-enable t)
	       (python-shell-completion-native-output-timeout
		python-shell-completion-native-try-output-timeout))
	   (python-shell-completion-native-get-completions
	    (get-buffer-process (current-buffer))
	    nil "_"))))

     (setq python-shell-completion-native-disabled-interpreters '("python"))
   #+END_SRC

* LaTeX 
  #+BEGIN_SRC emacs-lisp
(use-package tex-site
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :config
  (setq TeX-parse-self t)
  ;; Here we make auctex aware of latexmk and xelatexmk. We can use
  ;; these instead of calling pdflatex, bibtex, pdflatex, pdflatex (or
  ;; similar). I'll set latexmk as the default as there's really no
  ;; reason to use pdflatex
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list '("latexmk" "latexmk -synctex=1 -shell-escape -pdf %s" TeX-run-TeX nil t :help "Process file with latexmk")))
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list '("xelatexmk" "latexmk -synctex=1 -shell-escape -xelatex %s" TeX-run-TeX nil t :help "Process file with xelatexmk")))
  (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk"))))
  #+END_SRC
* Yasnippet
This is a package that /gives/ code snippets to several languages.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (use-package yasnippet-snippets
    :ensure t)
  (yas-reload-all))
#+END_SRC

The following block activates yas minor mode for different major modes.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'yas-minor-mode)
(add-hook 'latex-mode-hook 'yas-minor-mode)
(add-hook 'f90-mode-hook 'yas-minor-mode)
(add-hook 'python-mode-hook 'yas-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
(add-hook 'c++-mode-hook 'yas-minor-mode)
(add-hook 'c-mode-hook 'yas-minor-mode)
(add-hook 'r-mode-hook 'yas-minor-mode)
(add-hook 'ess-mode-hook 'yas-minor-mode)
#+END_SRC
* R (in ESS)
** Only for R stuff
   #+BEGIN_SRC emacs-lisp
     (use-package ess-site
       :ensure ess
       :demand t
       :if
       (eq system-type 'darwin)
       :config
       ;; Don't hog Emacs when submitting long-running code
       (setq ess-eval-visibly 'nowait))
   #+END_SRC
* Magit 
  This is a git /interface/ to help with the git workflow.
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :init
      (progn
      (bind-key "C-x g" 'magit-status)
      ))

  #+END_SRC
* Fortran
This stuff is for testing purposes. I'm trying to get Fortran running on my computers. 

#+BEGIN_SRC emacs-lisp
  (autoload 'f90-mode "f90" "Fortran 90 mode" t)
  (add-hook 'f90-mode-hook 'my-f90-mode-hook)

  (defun my-f90-mode-hook ()
    (setq f90-font-lock-keywords f90-font-lock-keywords-3)
    (abbrev-mode 1)                       ; turn on abbreviation mode
    (turn-on-font-lock)                   ; syntax highlighting
    (auto-fill-mode 0))                   ; turn off auto-filling
#+END_SRC
* Misc Packages
** How long did Emacs take to load?
   #+BEGIN_SRC emacs-lisp
     (defconst emacs-start-time (current-time))

     (let ((elapsed (float-time (time-subtract (current-time)
					       emacs-start-time))))
       (message "[STARTUP] Loading %s ... done (%.3fs)" load-file-name elapsed))
   #+END_SRC











   
